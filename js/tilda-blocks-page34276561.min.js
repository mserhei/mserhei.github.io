window.isMobile = !1;
if (
  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent
  )
) {
  window.isMobile = !0;
}
function t_throttle(fn, threshhold, scope) {
  var last;
  var deferTimer;
  threshhold || (threshhold = 250);
  return function () {
    var context = scope || this;
    var now = +new Date();
    var args = arguments;
    if (last && now < last + threshhold) {
      clearTimeout(deferTimer);
      deferTimer = setTimeout(function () {
        last = now;
        fn.apply(context, args);
      }, threshhold);
    } else {
      last = now;
      fn.apply(context, args);
    }
  };
}
function t228__init(recid) {
  var rec = document.getElementById("rec" + recid);
  if (!rec) return;
  var menuBlock = rec.querySelector(".t228");
  var mobileMenu = rec.querySelector(".t228__mobile");
  var menuSubLinkItems = rec.querySelectorAll(".t-menusub__link-item");
  var rightBtn = rec.querySelector(".t228__right_buttons_but .t-btn");
  var mobileMenuPosition = mobileMenu
    ? mobileMenu.style.position || window.getComputedStyle(mobileMenu).position
    : "";
  var mobileMenuDisplay = mobileMenu
    ? mobileMenu.style.display || window.getComputedStyle(mobileMenu).display
    : "";
  var isFixedMobileMenu =
    mobileMenuPosition === "fixed" && mobileMenuDisplay === "block";
  var overflowEvent = document.createEvent("Event");
  var noOverflowEvent = document.createEvent("Event");
  overflowEvent.initEvent("t228_overflow", !0, !0);
  noOverflowEvent.initEvent("t228_nooverflow", !0, !0);
  if (menuBlock) {
    menuBlock.addEventListener("t228_overflow", function () {
      t228_checkOverflow(recid);
    });
    menuBlock.addEventListener("t228_nooverflow", function () {
      t228_checkNoOverflow(recid);
    });
  }
  rec.addEventListener("click", function (e) {
    var targetLink = e.target.closest(".t-menusub__target-link");
    if (targetLink && window.isMobile) {
      if (targetLink.classList.contains("t-menusub__target-link_active")) {
        if (menuBlock) menuBlock.dispatchEvent(overflowEvent);
      } else {
        if (menuBlock) menuBlock.dispatchEvent(noOverflowEvent);
      }
    }
    var currentLink = e.target.closest(
      ".t-menu__link-item:not(.tooltipstered):not(.t-menusub__target-link):not(.t794__tm-link):not(.t966__tm-link):not(.t978__tm-link):not(.t978__menu-link)"
    );
    if (currentLink && mobileMenu && isFixedMobileMenu) mobileMenu.click();
  });
  Array.prototype.forEach.call(menuSubLinkItems, function (linkItem) {
    linkItem.addEventListener("click", function () {
      if (mobileMenu && isFixedMobileMenu) mobileMenu.click();
    });
  });
  if (rightBtn) {
    rightBtn.addEventListener("click", function () {
      if (mobileMenu && isFixedMobileMenu) mobileMenu.click();
    });
  }
  if (menuBlock) {
    menuBlock.addEventListener("showME601a", function () {
      var menuLinks = rec.querySelectorAll(".t966__menu-link");
      Array.prototype.forEach.call(menuLinks, function (menuLink) {
        menuLink.addEventListener("click", function () {
          if (mobileMenu && isFixedMobileMenu) mobileMenu.click();
        });
      });
    });
  }
}
function t228_checkOverflow(recid) {
  var rec = document.getElementById("rec" + recid);
  var menu = rec ? rec.querySelector(".t228") : null;
  if (!menu) return;
  var mobileContainer = document.querySelector(".t228__mobile_container");
  var mobileContainerHeight = t228_getFullHeight(mobileContainer);
  var windowHeight = document.documentElement.clientHeight;
  var menuPosition =
    menu.style.position || window.getComputedStyle(menu).position;
  if (menuPosition === "fixed") {
    menu.classList.add("t228__overflow");
    menu.style.setProperty(
      "height",
      windowHeight - mobileContainerHeight + "px",
      "important"
    );
  }
}
function t228_checkNoOverflow(recid) {
  var rec = document.getElementById("rec" + recid);
  if (!rec) return !1;
  var menu = rec.querySelector(".t228");
  var menuPosition = menu
    ? menu.style.position || window.getComputedStyle(menu).position
    : "";
  if (menuPosition === "fixed") {
    if (menu) menu.classList.remove("t228__overflow");
    if (menu) menu.style.height = "auto";
  }
}
function t228_setWidth(recid) {
  var rec = document.getElementById("rec" + recid);
  if (!rec) return;
  var menuCenterSideList = rec.querySelectorAll(".t228__centerside");
  Array.prototype.forEach.call(menuCenterSideList, function (menuCenterSide) {
    menuCenterSide.classList.remove("t228__centerside_hidden");
  });
  if (window.innerWidth <= 980) return;
  var menuBlocks = rec.querySelectorAll(".t228");
  Array.prototype.forEach.call(menuBlocks, function (menu) {
    var maxWidth;
    var centerWidth = 0;
    var paddingWidth = 40;
    var leftSide = menu.querySelector(".t228__leftside");
    var rightSide = menu.querySelector(".t228__rightside");
    var menuList = menu.querySelector(".t228__list");
    var mainContainer = menu.querySelector(".t228__maincontainer");
    var leftContainer = menu.querySelector(".t228__leftcontainer");
    var rightContainer = menu.querySelector(".t228__rightcontainer");
    var centerContainer = menu.querySelector(".t228__centercontainer");
    var centerContainerLi = centerContainer
      ? centerContainer.querySelectorAll("li")
      : [];
    var leftContainerWidth = t228_getFullWidth(leftContainer);
    var rightContainerWidth = t228_getFullWidth(rightContainer);
    var mainContainerWidth = mainContainer ? mainContainer.offsetWidth : 0;
    var dataAlign = menu.getAttribute("data-menu-items-align");
    var isDataAlignCenter = dataAlign === "center" || dataAlign === null;
    maxWidth =
      leftContainerWidth >= rightContainerWidth
        ? leftContainerWidth
        : rightContainerWidth;
    maxWidth = Math.ceil(maxWidth);
    Array.prototype.forEach.call(centerContainerLi, function (li) {
      centerWidth += t228_getFullWidth(li);
    });
    if (
      mainContainerWidth - (maxWidth * 2 + paddingWidth * 2) >
      centerWidth + 20
    ) {
      if (isDataAlignCenter) {
        if (leftSide) leftSide.style.minWidth = maxWidth + "px";
        if (rightSide) rightSide.style.minWidth = maxWidth + "px";
      }
    } else {
      if (leftSide) leftSide.style.minWidth = maxWidth + "";
      if (rightSide) rightSide.style.minWidth = maxWidth + "";
    }
    if (menuList && menuList.classList.contains("t228__list_hidden"))
      menuList.classList.remove("t228__list_hidden");
  });
}
function t228_getFullWidth(el) {
  if (!el) return 0;
  var marginLeft =
    el.style.marginLeft || window.getComputedStyle(el).marginLeft;
  var marginRight =
    el.style.marginRight || window.getComputedStyle(el).marginRight;
  marginLeft = parseInt(marginLeft, 10) || 0;
  marginRight = parseInt(marginRight, 10) || 0;
  return el.offsetWidth + marginLeft + marginRight;
}
function t228_getFullHeight(el) {
  if (!el) return 0;
  var marginTop = el.style.marginTop || window.getComputedStyle(el).marginTop;
  var marginBottom =
    el.style.marginBottom || window.getComputedStyle(el).marginBottom;
  marginTop = parseInt(marginTop, 10) || 0;
  marginBottom = parseInt(marginBottom, 10) || 0;
  return el.offsetHeight + marginTop + marginBottom;
}
function t282_showMenu(recid) {
  var rec = document.getElementById("rec" + recid);
  if (!rec) return;
  var menu = rec.querySelector(".t282");
  var submenu = rec.querySelector(".t-menusub__container");
  var allRec = document.getElementById("allrecords");
  var isEdit = allRec ? allRec.getAttribute("data-tilda-mode") === "edit" : !1;
  if (isEdit && submenu) {
    submenu.style.position = "relative";
    submenu.style.zIndex = "10";
    submenu.style.pointerEvents = "none";
  }
  var menuLinks = rec.querySelectorAll(".t-menusub__link-item");
  var menuContainer = rec.querySelector(".t282__container");
  var menuAndOverlay = rec.querySelectorAll(
    ".t282__menu__container, .t282__overlay"
  );
  var canBeClickedItems = rec.querySelectorAll(
    ".t282 .t-menuburger, .t282__menu__link:not(.tooltipstered):not(.t282__menu__link_submenu), .t282__overlay"
  );
  var menuBlock = rec.querySelector(".t282__menu__container");
  var menuWrapper = menu.querySelector(".t282__menu__wrapper");
  var menuContainerHeight = menuContainer
    ? menuContainer.getBoundingClientRect().height
    : 0;
  Array.prototype.forEach.call(canBeClickedItems, function (element) {
    element.addEventListener("click", function () {
      if (
        element.closest(
          ".t282__menu__link.tooltipstered, .t794__tm-link, .t978__tm-link, .t966__tm-link"
        )
      )
        return;
      document.body.classList.toggle("t282_opened");
      Array.prototype.forEach.call(menuAndOverlay, function (el) {
        el.style.transform = "";
        if (
          element.closest(".t-menuburger") &&
          el.closest(".t282__menu__container") &&
          el.classList.contains("t282__closed") &&
          !window.isMobile
        ) {
          el.style.pointerEvents = "none";
          setTimeout(function () {
            el.style.pointerEvents = "";
          }, 500);
        }
        var menuContainerHeight = menuContainer
          ? menuContainer.getBoundingClientRect().height
          : 0;
        if (
          element.closest(".t-menuburger") &&
          menuWrapper.clientHeight > menuBlock.clientHeight &&
          !el.classList.contains("t282__closed")
        ) {
          el.style.transform =
            "translateY(calc(-100% - " + menuContainerHeight + "px))";
        }
        el.classList.toggle("t282__closed");
      });
      if (menuBlock) menuBlock.style.top = menuContainerHeight + "px";
      var menuBurger = rec.querySelector(".t-menuburger");
      if (menuBurger)
        menuBurger.classList.toggle(
          "t-menuburger-opened",
          document.body.classList.contains("t282_opened")
        );
      t282_highlight(recid);
    });
  });
  menu.addEventListener("clickedAnchorInTooltipMenu", function () {
    document.body.classList.remove("t282_opened");
    Array.prototype.forEach.call(menuAndOverlay, function (el) {
      el.classList.add("t282__closed");
    });
  });
  Array.prototype.forEach.call(menuLinks, function (link) {
    link.addEventListener("click", function () {
      document.body.classList.remove("t282_opened");
      Array.prototype.forEach.call(menuAndOverlay, function (el) {
        el.classList.add("t282__closed");
      });
    });
  });
}
function t282_changeSize(recid) {
  var rec = document.getElementById("rec" + recid);
  if (!rec) return;
  var menu = rec.querySelector(".t282__container");
  var menuContainer = rec.querySelector(".t282__menu__container");
  var menuWrapper = document.getElementById("nav" + recid);
  var menuHeight = menu ? menu.offsetHeight : 0;
  var menuContainerHeight = menuContainer ? menuContainer.offsetHeight : 0;
  if (
    menuHeight >
    document.documentElement.clientHeight - menuContainerHeight
  ) {
    if (menuWrapper) menuWrapper.classList.add("t282__menu_static");
  } else {
    if (menuWrapper) menuWrapper.classList.remove("t282__menu_static");
  }
}
function t282_changeBgOpacityMenu(recid) {
  var rec = document.getElementById("rec" + recid);
  if (!rec) return;
  var menuBlocks = rec.querySelectorAll(".t282__container__bg");
  Array.prototype.forEach.call(menuBlocks, function (menu) {
    var bgColor = menu.getAttribute("data-bgcolor-rgba");
    var bgColorAfterScroll = menu.getAttribute("data-bgcolor-rgba-afterscroll");
    var bgOpacity = menu.getAttribute("data-bgopacity");
    var bgOpacityTwo = menu.getAttribute("data-bgopacity2");
    var menuShadow = menu.getAttribute("data-menu-shadow") || "0";
    var menuShadowValue = menuShadow === "100" ? menuShadow : "0." + menuShadow;
    menu.style.backgroundColor =
      window.pageYOffset > 20 ? bgColorAfterScroll : bgColor;
    if (
      (window.pageYOffset > 20 && bgOpacityTwo === "0") ||
      (window.pageYOffset <= 20 && bgOpacity === "0.0") ||
      menuShadow === " "
    ) {
      menu.style.boxShadow = "none";
    } else {
      menu.style.boxShadow = "0px 1px 3px rgba(0,0,0," + menuShadowValue + ")";
    }
  });
}
function t282_highlight(recid) {
  var url = window.location.href;
  var pathname = window.location.pathname;
  var hash = window.location.hash;
  if (url.substr(url.length - 1) === "/") {
    url = url.slice(0, -1);
  }
  if (pathname.substr(pathname.length - 1) === "/") {
    pathname = pathname.slice(0, -1);
  }
  if (pathname.charAt(0) === "/") {
    pathname = pathname.slice(1);
  }
  if (pathname === "") {
    pathname = "/";
  }
  var shouldBeActiveElements = document.querySelectorAll(
    ".t282__menu a[href='" +
      url +
      "'], " +
      ".t282__menu a[href='" +
      url +
      "/'], " +
      ".t282__menu a[href='" +
      pathname +
      "'], " +
      ".t282__menu a[href='/" +
      pathname +
      "'], " +
      ".t282__menu a[href='" +
      pathname +
      "/'], " +
      ".t282__menu a[href='/" +
      pathname +
      "/']" +
      (hash ? ", .t282__menu a[href='" + hash + "']" : "") +
      (hash ? ", .t282__menu a[href='/" + hash + "']" : "") +
      (hash ? ", .t282__menu a[href='" + hash + "/']" : "") +
      (hash ? ", .t282__menu a[href='/" + hash + "/']" : "")
  );
  var rec = document.getElementById("rec" + recid);
  var menuLinks = rec ? rec.querySelectorAll(".t282__menu a") : [];
  Array.prototype.forEach.call(menuLinks, function (link) {
    link.classList.remove("t-active");
  });
  Array.prototype.forEach.call(shouldBeActiveElements, function (link) {
    link.classList.add("t-active");
  });
}
function t282_appearMenu(recid) {
  var record = document.getElementById("rec" + recid);
  var menuBlock = record.querySelector(".t282");
  var fixedMenu = menuBlock
    ? menuBlock.querySelector(".t282__positionfixed")
    : null;
  if (!fixedMenu) return;
  var appearOffset = menuBlock.getAttribute("data-appearoffset");
  if (appearOffset && appearOffset.indexOf("vh") !== -1) {
    appearOffset = Math.floor(
      window.innerHeight * (parseInt(appearOffset) / 100)
    );
  }
  appearOffset = parseInt(appearOffset, 10);
  var menuHeight = fixedMenu.clientHeight;
  if (typeof appearOffset === "number" && window.pageYOffset >= appearOffset) {
    if (fixedMenu.style.transform === "translateY(-" + menuHeight + "px)") {
      t282_slideUpElement(fixedMenu, menuHeight, "toBottom");
    }
  } else if (fixedMenu.style.transform === "translateY(0px)") {
    t282_slideUpElement(fixedMenu, menuHeight, "toTop");
  } else {
    fixedMenu.style.transform = "translateY(-" + menuHeight + "px)";
    fixedMenu.style.opacity = "0";
  }
}
function t282_slideUpElement(menu, menuHeight, direction) {
  var diff = direction === "toTop" ? 0 : menuHeight;
  var diffOpacity = direction === "toTop" ? 1 : 0;
  var timerID = setInterval(function () {
    menu.style.transform = "translateY(-" + diff + "px)";
    menu.style.opacity = diffOpacity.toString();
    diffOpacity = direction === "toTop" ? diffOpacity - 0.1 : diffOpacity + 0.1;
    diff =
      direction === "toTop" ? diff + menuHeight / 20 : diff - menuHeight / 20;
    if (direction === "toTop" && diff >= menuHeight) {
      menu.style.transform = "translateY(-" + menuHeight + "px)";
      menu.style.opacity = "0";
      clearInterval(timerID);
    }
    if (direction === "toBottom" && diff <= 0) {
      menu.style.transform = "translateY(0px)";
      menu.style.opacity = "1";
      clearInterval(timerID);
    }
  }, 10);
}
function t674_init(recid) {
  var rec = document.getElementById("rec" + recid);
  if (!rec) return;
  var backgroundImage = rec.querySelector(".t674__img-holder");
  if (!backgroundImage) return;
  backgroundImage.onload = function () {
    var delay = 0;
    var allRecords = document.getElementById("allrecords");
    if (allRecords.getAttribute("data-blocks-animationoff") !== "yes") {
      delay = 600;
    }
    setTimeout(function () {
      document.body.classList.add("t674__body_with-bg");
    }, delay);
  };
  var event = document.createEvent("HTMLEvents");
  event.initEvent("load", !0, !1);
  backgroundImage.dispatchEvent(event);
}
function t390_initPopup(recId) {
  var rec = document.getElementById("rec" + recId);
  if (!rec) return;
  var container = rec.querySelector(".t390");
  if (!container) return;
  rec.setAttribute("data-animationappear", "off");
  rec.style.opacity = 1;
  var popup = rec.querySelector(".t-popup");
  var popupTooltipHook = popup.getAttribute("data-tooltip-hook");
  var analitics = popup.getAttribute("data-track-popup");
  var popupCloseBtn = popup.querySelector(".t-popup__close");
  var hrefs = rec.querySelectorAll('a[href*="#"]');
  var escapeEvent = t390_escClosePopup.bind(this, recId);
  if (popupTooltipHook) {
    var recBlocks = document.querySelectorAll(".r");
    t_onFuncLoad("t_popup__addAttributesForAccessibility", function () {
      t_popup__addAttributesForAccessibility(popupTooltipHook);
    });
    for (var i = 0; i < recBlocks.length; i++) {
      recBlocks[i].addEventListener("click", function (event) {
        var target = event.target;
        var href = target.closest('a[href="' + popupTooltipHook + '"]')
          ? target
          : !1;
        if (!href) return;
        event.preventDefault();
        t390_showPopup(recId, escapeEvent);
        t_onFuncLoad("t_popup__resizePopup", function () {
          t_popup__resizePopup(recId);
        });
        t390__lazyLoad();
        if (analitics && window.Tilda) {
          Tilda.sendEventToStatistics(analitics, popupTooltipHook);
        }
      });
      t_onFuncLoad("t_popup__addClassOnTriggerButton", function () {
        t_popup__addClassOnTriggerButton(recBlocks[i], popupTooltipHook);
      });
    }
  }
  popup.addEventListener(
    "scroll",
    t_throttle(function () {
      t390__lazyLoad();
    })
  );
  popup.addEventListener("click", function (event) {
    if (event.target === this) t390_closePopup(recId, escapeEvent);
  });
  popupCloseBtn.addEventListener("click", function () {
    t390_closePopup(recId, escapeEvent);
  });
  for (var i = 0; i < hrefs.length; i++) {
    hrefs[i].addEventListener("click", function () {
      var url = this.getAttribute("href");
      if (!url || url.substring(0, 7) != "#price:") {
        t390_closePopup(recId, escapeEvent);
        if (!url || url.substring(0, 7) == "#popup:") {
          setTimeout(function () {
            document.body.classList.add("t-body_popupshowed");
          }, 300);
        }
      }
    });
  }
  var curPath = window.location.pathname;
  var curFullPath = window.location.origin + curPath;
  var isAndroid = /(android)/i.test(navigator.userAgent);
  if (isAndroid) {
    var selects =
      'a[href^="#"]:not([href="#"]):not([href^="#price"]):not([href^="#popup"]):not([href^="#prodpopup"]):not([href^="#order"]):not([href^="#!"]),' +
      'a[href^="' +
      curPath +
      '#"]:not([href*="#!/tproduct/"]):not([href*="#!/tab/"]):not([href*="#popup"]),' +
      'a[href^="' +
      curFullPath +
      '#"]:not([href*="#!/tproduct/"]):not([href*="#!/tab/"]):not([href*="#popup"])';
    var selectors = rec.querySelectorAll(selects);
    for (var i = 0; i < selectors.length; i++) {
      selectors[i].addEventListener("click", function (event) {
        var hash = this.hash.trim();
        if (window.location.hash) {
          setTimeout(function () {
            window.location.href = hash;
          }, 50);
        }
      });
    }
  }
  function t390_escClosePopup(recId) {
    if (arguments[1].key === "Escape") t390_closePopup(recId, escapeEvent);
  }
}
function t390_showPopup(recId, escapeEvent) {
  var rec = document.getElementById("rec" + recId);
  if (!rec) return;
  var container = rec.querySelector(".t390");
  if (!container) return;
  var windowWidth = window.innerWidth;
  var screenMin = rec.getAttribute("data-screen-min");
  var screenMax = rec.getAttribute("data-screen-max");
  if (screenMin && windowWidth < parseInt(screenMin, 10)) return;
  if (screenMax && windowWidth > parseInt(screenMax, 10)) return;
  var popup = rec.querySelector(".t-popup");
  var documentBody = document.body;
  t_onFuncLoad("t_popup__showPopup", function () {
    t_popup__showPopup(popup);
  });
  documentBody.classList.add("t-body_popupshowed");
  documentBody.classList.add("t390__body_popupshowed");
  document.addEventListener("keydown", escapeEvent);
}
function t390_closePopup(recId, escapeEvent) {
  var rec = document.getElementById("rec" + recId);
  var popup = rec.querySelector(".t-popup");
  var popupActive = document.querySelector(".t-popup.t-popup_show");
  if (popup === popupActive) {
    document.body.classList.remove("t-body_popupshowed");
    document.body.classList.remove("t390__body_popupshowed");
  }
  popup.classList.remove("t-popup_show");
  t_onFuncLoad("t_popup__addFocusOnTriggerButton", function () {
    t_popup__addFocusOnTriggerButton();
  });
  setTimeout(function () {
    var popupHide = document.querySelectorAll(".t-popup:not(.t-popup_show)");
    for (var i = 0; i < popupHide.length; i++) {
      popupHide[i].style.display = "none";
    }
  }, 300);
  document.removeEventListener("keydown", escapeEvent);
}
function t390_sendPopupEventToStatistics(popupName) {
  var virtPage = "/tilda/popup/";
  var virtTitle = "Popup: ";
  if (popupName.substring(0, 7) == "#popup:") {
    popupName = popupName.substring(7);
  }
  virtPage += popupName;
  virtTitle += popupName;
  if (window.Tilda && typeof Tilda.sendEventToStatistics == "function") {
    Tilda.sendEventToStatistics(virtPage, virtTitle, "", 0);
  } else {
    if (ga) {
      if (window.mainTracker != "tilda") {
        ga("send", { hitType: "pageview", page: virtPage, title: virtTitle });
      }
    }
    if (window.mainMetrika && window[window.mainMetrika]) {
      window[window.mainMetrika].hit(virtPage, {
        title: virtTitle,
        referer: window.location.href,
      });
    }
  }
}
function t390__lazyLoad() {
  var allRecords = document.getElementById("allrecords");
  if (
    window.lazy === "y" ||
    (allRecords && allRecords.getAttribute("data-tilda-lazy") === "yes")
  ) {
    t_onFuncLoad("t_lazyload_update", function () {
      t_lazyload_update();
    });
  }
}
function t448_setHeight(recid) {
  var rec = document.getElementById("rec" + recid);
  if (!rec) return;
  var cover = rec.querySelector(".t-cover");
  var coverHeight = cover ? cover.offsetHeight : 0;
  var coverWrapper = rec.querySelector(".t448-cover__wrapper");
  var textWrapper = rec.querySelector(".t448__wrapper");
  var textHeight = textWrapper ? textWrapper.clientHeight : 0;
  var screenShot = rec.querySelector(".t448__screenshot");
  var imgHeight = screenShot ? screenShot.offsetHeight : 0;

  ///code below was added
  var window_width = window.innerWidth;
  if (recid === "553781120") {
    if (window_width > 980) {
      imgHeight = 631;
    }
    if (window_width > 1200) {
      imgHeight = 779;
    }
  }

  var height = textHeight + imgHeight;
  var newHeight = coverHeight - imgHeight;
  var container = rec.querySelector(".t448");
  var cropImg = container ? container.getAttribute("data-crop-image") : "";
  if (cropImg && container) {
    container.classList.add("t448__no-overflow");
    if (coverWrapper) {
      container.style.height = coverWrapper.offsetHeight + "px";

      ///code below was added
      if (recid === '553781120') {
        if (window_width > 980) {
            container.style.height = "1078px";
          }
        if (window_width > 1200) {
          container.style.height = "1234px";
        }
      }
      
    }
  }
  if (coverHeight > height) {
    rec.classList.add("t448__stretched");
    if (coverWrapper) coverWrapper.style.height = newHeight + "px";
    if (cropImg && container) {
      container.classList.remove("t448__no-overflow");
      container.style.height = "";
    }
  } else {
    rec.classList.remove("t448__stretched");
    if (coverWrapper) coverWrapper.style.height = "";
  }
}
function t635_init(recid, textColor, cursorColor) {
  var rec = document.querySelector("#rec" + recid);
  if (!rec) return;
  var typingData = rec.querySelector(".t635__textholder");
  if (!typingData) return;
  var typingRecIdList = typingData.getAttribute("data-recid").split(",");
  if (typingRecIdList.length === 0) return;
  typingRecIdList.forEach(function (animRecId) {
    var currentRecID = document.querySelector("#rec" + animRecId);
    if (!currentRecID) return;
    var screenMin = parseInt(currentRecID.getAttribute("data-screen-min"), 10);
    var screenMax = parseInt(currentRecID.getAttribute("data-screen-max"), 10);
    if (isNaN(screenMax) && isNaN(screenMin)) {
      t635_startType(recid, animRecId, textColor, cursorColor);
    } else if (!isNaN(screenMax) && !isNaN(screenMin)) {
      if (window.innerWidth >= screenMin && window.innerWidth <= screenMax) {
        t635_startType(recid, animRecId, textColor, cursorColor);
      }
    } else if (!isNaN(screenMax)) {
      if (window.innerWidth <= screenMax) {
        t635_startType(recid, animRecId, textColor, cursorColor);
      }
    } else if (!isNaN(screenMin)) {
      if (window.innerWidth >= screenMin) {
        t635_startType(recid, animRecId, textColor, cursorColor);
      }
    }
  });
}
function t635_startType(recid, animRecId, textColor, cursorColor) {
  var rec = document.querySelector("#rec" + recid);
  if (!rec) return;
  var animData = rec.querySelector(".t635__textholder");
  if (!animData) return;
  var animText = t635_findAnimElem(animRecId);
  var phrasesList = [];
  var phrase1 = animData.getAttribute("data-text1");
  var phrase2 = animData.getAttribute("data-text2");
  var phrase3 = animData.getAttribute("data-text3");
  var phrase4 = animData.getAttribute("data-text4");
  var phrase5 = animData.getAttribute("data-text5");
  var animSpeed = animData.getAttribute("data-speed");
  var backspaceDelay = animData.getAttribute("data-backspacing-delay");
  var animLoop = animData.getAttribute("data-loop");
  if (animLoop === null) animLoop = !0;
  if (animLoop === "false") animLoop = !1;
  if (!animText) return;
  if (typeof phrase1 === "string") {
    phrasesList.push(phrase1.slice(0, 80));
  }
  if (typeof phrase2 === "string") {
    phrasesList.push(phrase2.slice(0, 80));
  }
  if (typeof phrase3 === "string") {
    phrasesList.push(phrase3.slice(0, 80));
  }
  if (typeof phrase4 === "string") {
    phrasesList.push(phrase4.slice(0, 80));
  }
  if (typeof phrase5 === "string") {
    phrasesList.push(phrase5.slice(0, 80));
  }
  if (animText && phrasesList.length) {
    var animTextHtml = animText.innerHTML;
    var animTextSplitted = animTextHtml.split("|");
    animText.innerHTML =
      animTextSplitted[0] +
      '<span class="t635__typing-text"></span>' +
      animTextSplitted[1];
    t635_updateAnimTextLimits(animRecId);
    t_onFuncLoad("t_throttle", function () {
      window.addEventListener(
        "resize",
        t_throttle(function () {
          t635_updateAnimTextLimits(animRecId);
        })
      );
    });
    setInterval(function () {
      t635_updateAnimTextLimits(animRecId);
    }, 5000);
    var animatedText = document.querySelector(
      "#rec" + animRecId + " .t635__typing-text"
    );
    if (!animatedText) return;
    var animTextTop = animatedText.getAttribute("data-top-limit");
    var animTextBottom = animatedText.getAttribute("data-bottom-limit");
    var windowTop = document.querySelector("html").scrollTop;
    var windowBottom = windowTop + window.innerHeight;
    t_onFuncLoad("Typed", function () {
      animatedText = document.querySelector(
        "#rec" + animRecId + " .t635__typing-text"
      );
      var typedInstance = t635_animateText(
        animRecId,
        phrasesList,
        animSpeed,
        animLoop,
        backspaceDelay
      );
      var animatedCursor = document.querySelector(
        "#rec" + animRecId + " .typed-cursor"
      );
      if (textColor && animatedText) animatedText.style.color = textColor;
      if (cursorColor && animatedCursor)
        animatedCursor.style.color = cursorColor;
      if (animTextBottom < windowTop || animTextTop > windowBottom) {
        typedInstance.reset();
        typedInstance.stop();
      }
      var ZeroBlock = animatedText.closest(".t396");
      var isSBSAnimation = !1;
      if (ZeroBlock) {
        var elem = animatedText.closest(".t396__elem");
        isSBSAnimation = elem
          ? !!elem.getAttribute("data-animate-sbs-event")
          : !1;
      }
      if ("IntersectionObserver" in window && !isSBSAnimation) {
        var observer = new IntersectionObserver(function (entries, observer) {
          Array.prototype.forEach.call(entries, function (entry) {
            var animCount = 0;
            if (entry.isIntersecting) {
              if (animLoop) {
                typedInstance.start();
              } else if (!animCount) {
                typedInstance.start();
                animCount++;
              }
            } else {
              if (animLoop) {
                typedInstance.stop();
              }
            }
          });
        });
        var recT809 = document.querySelector('[data-record-type="809"]');
        if (recT809) {
          if (recT809.getAttribute("data-replacement-completed") === "yes") {
            observer.observe(animatedText);
          } else {
            document.addEventListener("replacingCompletedT809", function () {
              observer.observe(animatedText);
            });
          }
        } else {
          observer.observe(animatedText);
        }
      } else {
        t_onFuncLoad("t_throttle", function () {
          window.addEventListener(
            "scroll",
            t_throttle(function () {
              animTextTop = animatedText.getAttribute("data-top-limit");
              animTextBottom = animatedText.getAttribute("data-bottom-limit");
              windowTop = document.querySelector("html").scrollTop;
              windowBottom = windowTop + window.innerHeight;
              if (
                animLoop &&
                (animTextBottom < windowTop || animTextTop > windowBottom)
              ) {
                typedInstance.reset();
                typedInstance.stop();
              } else {
                typedInstance.start();
              }
            }, 700)
          );
        });
      }
      if (ZeroBlock) {
        var event = document.createEvent("HTMLEvents");
        event.initEvent("animationInited", !0, !1);
        window.dispatchEvent(event);
      }
    });
  }
}
function t635_findAnimElem(animRecId) {
  var animRec = document.querySelector("#rec" + animRecId);
  if (!animRec) return;
  var currentH1 = t635_findAnimTag(animRec, "h1");
  var currentH2 = t635_findAnimTag(animRec, "h2");
  var currentH3 = t635_findAnimTag(animRec, "h3");
  var currentDiv = t635_findAnimTag(animRec, "div");
  if (currentH1) return currentH1;
  if (currentH2) return currentH2;
  if (currentH3) return currentH3;
  if (currentDiv) return currentDiv;
}
function t635_findAnimTag(parent, element) {
  var allElements = parent.querySelectorAll(element);
  for (var i = 0; i < allElements.length; i++) {
    if (
      allElements[i].innerHTML.indexOf("|") !== -1 &&
      allElements[i].innerHTML.indexOf("t-map") === -1
    ) {
      var lastElement = allElements[i];
    }
  }
  return lastElement;
}
function t635_updateAnimTextLimits(animRecId) {
  var animatedBlock = document.querySelector("#rec" + animRecId);
  if (!animatedBlock) return;
  var animatedText = animatedBlock.querySelector(".t635__typing-text");
  if (animatedText) {
    animatedText.setAttribute(
      "data-top-limit",
      animatedText.getBoundingClientRect().top + window.pageYOffset
    );
    animatedText.setAttribute(
      "data-bottom-limit",
      animatedBlock.getBoundingClientRect().top +
        window.pageYOffset +
        animatedBlock.clientHeight
    );
  }
}
function t635_animateText(
  animRecId,
  phrasesList,
  animSpeed,
  animLoop,
  backspaceDelay
) {
  if (!animSpeed) animSpeed = 40;
  if (!backspaceDelay) backspaceDelay = 800;
  var animRec = "#rec" + animRecId + " .t635__typing-text";
  return new Typed(animRec, {
    strings: phrasesList,
    typeSpeed: animSpeed * 1,
    startDelay: 600,
    backDelay: backspaceDelay,
    loop: animLoop,
  });
}
if (!Element.prototype.matches) {
  Element.prototype.matches =
    Element.prototype.matchesSelector ||
    Element.prototype.msMatchesSelector ||
    Element.prototype.mozMatchesSelector ||
    Element.prototype.webkitMatchesSelector ||
    Element.prototype.oMatchesSelector;
}
if (!Element.prototype.closest) {
  Element.prototype.closest = function (s) {
    var el = this;
    while (el && el.nodeType === 1) {
      if (Element.prototype.matches.call(el, s)) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    }
    return null;
  };
}
function t668_init(recId) {
  var rec = document.getElementById("rec" + recId);
  if (!rec) return;
  var container = rec.querySelector(".t668");
  if (!container) return;
  var accordion = rec.querySelectorAll(".t668__accordion")[0];
  var headers = rec.querySelectorAll(".t668__header");
  var isLazy = document
    .getElementById("allrecords")
    .getAttribute("data-tilda-lazy");
  var content = rec.querySelector(".t668__content");
  if (!content) return;
  var contentStyle = window.getComputedStyle(content, null);
  if (!contentStyle && typeof contentStyle !== "object") return;
  var oldStyle = {
    paddingTop: contentStyle.paddingTop,
    paddingBottom: contentStyle.paddingBottom,
  };
  if (accordion) {
    accordion = accordion.getAttribute("data-accordion");
  } else {
    accordion = "false";
  }
  for (var i = 0; i < headers.length; i++) {
    headers[i].addEventListener("click", function () {
      var element = this;
      var container = element.nextElementSibling;
      var triggerButton = element.querySelector(".t668__trigger-button");
      if (triggerButton) {
        var isExpanded = triggerButton.getAttribute("aria-expanded") === "true";
        triggerButton.setAttribute("aria-expanded", !isExpanded);
        container.hidden = isExpanded;
      }
      if (element.classList.contains("t668__opened")) {
        element.classList.remove("t668__opened");
        t668_accordionHide(container);
      } else {
        if (accordion === "true") {
          t668_accordionAllHide(headers);
        }
        element.classList.add("t668__opened");
        container.style.display = "block";
        var height = container.scrollHeight;
        container.style.maxHeight = "0px";
        setTimeout(function () {
          container.style.maxHeight = height + "px";
          container.setAttribute(
            "style",
            t668_addStyle(container) +
              " padding-top: " +
              oldStyle.paddingTop +
              "; padding-bottom: " +
              oldStyle.paddingBottom +
              ";"
          );
        }, 0);
      }
      if (window.lazy === "y" || isLazy === "yes") {
        t_onFuncLoad("t_lazyload_update", function () {
          t_lazyload_update();
        });
      }
    });
  }
}
function t668_accordionAllHide(headers) {
  for (var i = 0; i < headers.length; i++) {
    var elementHide = headers[i];
    elementHide.classList.remove("t668__opened");
    t668_accordionHide(elementHide.nextElementSibling);
  }
}
function t668_accordionHide(container) {
  if (!container.style.maxHeight)
    container.style.maxHeight = container.scrollHeight + "px";
  setTimeout(function () {
    container.style.maxHeight = 0;
    container.setAttribute(
      "style",
      t668_addStyle(container) +
        " padding-top: 0px !important; padding-bottom: 0px !important;"
    );
  }, 0);
}
function t668_addStyle(container) {
  var attrStyle = container.getAttribute("style");
  var arrStyle = attrStyle.split(";");
  var newArr = [];
  for (var i = 0; i < arrStyle.length; i++) {
    var style = arrStyle[i];
    if (
      style.indexOf("padding-top") === -1 &&
      style.indexOf("padding-bottom") === -1
    ) {
      newArr.push(style);
    }
  }
  return newArr.join(";");
}
window.requestAnimationFrame = (function () {
  return (
    window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.oRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    function (callback) {
      window.setTimeout(callback, 1000 / 60);
    }
  );
})();
function t270_scroll(hash, offset) {
  if (!hash) return;
  t270_checkLoad(hash, offset);
  if (hash.indexOf("#!/tproduct/") !== -1 || hash.indexOf("#!/tab/") !== -1) {
    return !0;
  }
  var isHistoryChangeAllowed = window.location.hash !== hash;
  var wrapperBlock = document.querySelector(".t270");
  var dontChangeHistory = wrapperBlock
    ? Boolean(wrapperBlock.getAttribute("data-history-disabled"))
    : !1;
  t270_scrollToEl(hash, offset);
  if (!dontChangeHistory && isHistoryChangeAllowed) {
    if (history.pushState) {
      history.pushState(null, null, hash);
    } else {
      window.location.hash = hash;
    }
    isHistoryChangeAllowed = !1;
  }
  return !0;
}
function t270_checkLoad(hash, offset) {
  if (window.t270_loadChecked) return;
  var sliderWrappers = document.body.querySelectorAll(".t-slds__items-wrapper");
  if (!sliderWrappers.length) return;
  var lastWrapper = sliderWrappers[sliderWrappers.length - 1];
  var sliderImgs = lastWrapper
    ? lastWrapper.querySelectorAll(".t-slds__bgimg")
    : [];
  var lastImg = sliderImgs[sliderImgs.length - 1];
  var imageUrl = lastImg
    ? window.getComputedStyle(lastImg).backgroundImage
    : "";
  imageUrl = imageUrl.substring(5, imageUrl.length - 2);
  var preloaderImg = document.createElement("img");
  preloaderImg.src = imageUrl ? imageUrl : "";
  preloaderImg.addEventListener("load", function () {
    t270_scroll(hash, offset);
    window.t270_loadChecked = !0;
  });
}
function t270_scrollToEl(hash, offset) {
  if (document.body.getAttribute("data-scroll")) return;
  var scrollTargetY = t270_getTarget(hash, offset);
  if (!scrollTargetY) return;
  var html = document.querySelector("html");
  var body = document.body;
  var documentHeight = Math.max(
    body.scrollHeight,
    body.offsetHeight,
    body.clientHeight,
    html.offsetHeight
  );
  var scrollY = window.scrollY || document.documentElement.scrollTop;
  var speed = 2000;
  var time = Math.max(
    0.1,
    Math.min(Math.abs(scrollY - scrollTargetY) / speed, 0.8)
  );
  var currentTime = 0;
  function t270_easeInQuad(pos) {
    return Math.pow(pos, 2);
  }
  function t270_animationScroll() {
    currentTime += 1 / 60;
    var newDocumentHeight = Math.max(
      body.scrollHeight,
      body.offsetHeight,
      body.clientHeight,
      html.offsetHeight
    );
    if (documentHeight < newDocumentHeight) {
      documentHeight = newDocumentHeight;
      scrollTargetY = t270_getTarget(hash, offset);
      scrollY = window.scrollY || document.documentElement.scrollTop;
      time = Math.max(
        0.1,
        Math.min(Math.abs(scrollY - scrollTargetY) / speed, 0.8)
      );
    }
    var difference = currentTime / time;
    var animation = t270_easeInQuad(difference);
    if (difference < 1) {
      requestAnimationFrame(t270_animationScroll);
      window.scrollTo(0, scrollY + (scrollTargetY - scrollY) * animation);
    } else {
      body.removeAttribute("data-scroll");
      body.removeAttribute("data-scrollable");
      window.scrollTo(0, scrollTargetY);
    }
  }
  body.setAttribute("data-scroll", "true");
  body.setAttribute("data-scrollable", "true");
  t270_animationScroll();
}
function t270_getTarget(hash, offset) {
  var target;
  try {
    if (hash.substring(0, 1) === "#") {
      target = document.getElementById(hash.substring(1));
    } else {
      target = document.querySelector(hash);
    }
  } catch (event) {
    console.log("Exception t270: " + event.message);
    return;
  }
  if (!target) {
    target = document.querySelector('a[name="' + hash.substr(1) + '"]');
    if (!target) return;
  }
  target = parseInt(
    target.getBoundingClientRect().top + window.pageYOffset - offset,
    10
  );
  target = Math.abs(target);
  return target;
}
function t886_init(recid) {
  var rec = document.querySelector('#rec' + recid); if (!rec) return; var notificationBlock = rec.querySelector('.t886'); var closeButton = rec.querySelector('.t886__btn'); var storageItem = notificationBlock.getAttribute('data-storage-item'); var lastOpen; try { lastOpen = localStorage.getItem(storageItem) } catch (error) { console.log('Your web browser does not support localStorage. Error status: ', error) }
  if (!lastOpen) { notificationBlock.classList.remove('t886_closed') }
  if (closeButton) {
      closeButton.addEventListener('click', function (event) {
          notificationBlock.classList.add('t886_closed'); try { localStorage.setItem(storageItem, Math.floor(Date.now() / 1000)) } catch (error) { console.log('Your web browser does not support localStorage. Error status: ', error) }
          event.preventDefault()
      })
  }
}

// добавлены скрипты для работы popup Тарифы

function t702_initPopup(recId) {
  var rec = document.getElementById('rec' + recId); if (!rec) return; var container = rec.querySelector('.t702'); if (!container) return; rec.setAttribute('data-animationappear', 'off'); rec.setAttribute('data-popup-subscribe-inited', 'y'); rec.style.opacity = 1; var documentBody = document.body; var popup = rec.querySelector('.t-popup'); var popupTooltipHook = popup.getAttribute('data-tooltip-hook'); var analitics = popup.getAttribute('data-track-popup'); var popupCloseBtn = popup.querySelector('.t-popup__close'); var hrefs = rec.querySelectorAll('a[href*="#"]'); var submitHref = rec.querySelector('.t-submit[href*="#"]'); if (popupTooltipHook) { t_onFuncLoad('t_popup__addAttributesForAccessibility', function () { t_popup__addAttributesForAccessibility(popupTooltipHook) }); document.addEventListener('click', function (event) { var target = event.target; var href = target.closest('a[href$="' + popupTooltipHook + '"]') ? target : !1; if (!href) return; event.preventDefault(); t702_showPopup(recId); t_onFuncLoad('t_popup__resizePopup', function () { t_popup__resizePopup(recId) }); t702__lazyLoad(); if (analitics && window.Tilda) { Tilda.sendEventToStatistics(analitics, popupTooltipHook) } }); t_onFuncLoad('t_popup__addClassOnTriggerButton', function () { t_popup__addClassOnTriggerButton(document, popupTooltipHook) }) }
  popup.addEventListener('scroll', t_throttle(function () { t702__lazyLoad() })); popup.addEventListener('click', function (event) { var windowWithoutScrollBar = window.innerWidth - 17; if (event.clientX > windowWithoutScrollBar) return; if (event.target === this) t702_closePopup(recId) }); popupCloseBtn.addEventListener('click', function () { t702_closePopup(recId) }); if (submitHref) { submitHref.addEventListener('click', function () { if (documentBody.classList.contains('t-body_scroll-locked')) { documentBody.classList.remove('t-body_scroll-locked') } }) }
  for (var i = 0; i < hrefs.length; i++) { hrefs[i].addEventListener('click', function () { var url = this.getAttribute('href'); if (!url || url.substring(0, 7) != '#price:') { t702_closePopup(recId); if (!url || url.substring(0, 7) == '#popup:') { setTimeout(function () { if (typeof t_triggerEvent === 'function') t_triggerEvent(document.body, 'popupShowed'); documentBody.classList.add('t-body_popupshowed') }, 300) } } }) }
  function t702_escClosePopup(event) { if (event.key === 'Escape') t702_closePopup(recId) }
  popup.addEventListener('tildamodal:show' + popupTooltipHook, function () { document.addEventListener('keydown', t702_escClosePopup) }); popup.addEventListener('tildamodal:close' + popupTooltipHook, function () { document.removeEventListener('keydown', t702_escClosePopup) })
}
function t702_lockScroll() { var documentBody = document.body; if (!documentBody.classList.contains('t-body_scroll-locked')) { var bodyScrollTop = typeof window.pageYOffset !== 'undefined' ? window.pageYOffset : (document.documentElement || documentBody.parentNode || documentBody).scrollTop; documentBody.classList.add('t-body_scroll-locked'); documentBody.style.top = '-' + bodyScrollTop + 'px'; documentBody.setAttribute('data-popup-scrolltop', bodyScrollTop) } }
function t702_unlockScroll() { var documentBody = document.body; if (documentBody.classList.contains('t-body_scroll-locked')) { var bodyScrollTop = documentBody.getAttribute('data-popup-scrolltop'); documentBody.classList.remove('t-body_scroll-locked'); documentBody.style.top = null; documentBody.removeAttribute('data-popup-scrolltop'); document.documentElement.scrollTop = parseInt(bodyScrollTop) } }
function t702_showPopup(recId) {
  var rec = document.getElementById('rec' + recId); if (!rec) return; var container = rec.querySelector('.t702'); if (!container) return; var windowWidth = window.innerWidth; var screenMin = rec.getAttribute('data-screen-min'); var screenMax = rec.getAttribute('data-screen-max'); if (screenMin && windowWidth < parseInt(screenMin, 10)) return; if (screenMax && windowWidth > parseInt(screenMax, 10)) return; var popup = rec.querySelector('.t-popup'); var popupTooltipHook = popup.getAttribute('data-tooltip-hook'); var ranges = rec.querySelectorAll('.t-range'); var documentBody = document.body; if (ranges.length) { Array.prototype.forEach.call(ranges, function (range) { t702__triggerEvent(range, 'popupOpened') }) }
  t_onFuncLoad('t_popup__showPopup', function () { t_popup__showPopup(popup) }); if (typeof t_triggerEvent === 'function') t_triggerEvent(document.body, 'popupShowed'); documentBody.classList.add('t-body_popupshowed'); documentBody.classList.add('t702__body_popupshowed'); if (/iPhone|iPad|iPod/i.test(navigator.userAgent) && !window.MSStream && window.isiOSVersion && window.isiOSVersion[0] === 11) { setTimeout(function () { t702_lockScroll() }, 500) }
  t702__lazyLoad(); t702__triggerEvent(popup, 'tildamodal:show' + popupTooltipHook)
}
function t702_closePopup(recId) {
  var rec = document.getElementById('rec' + recId); var popup = rec.querySelector('.t-popup'); var popupTooltipHook = popup.getAttribute('data-tooltip-hook'); var popupAll = document.querySelectorAll('.t-popup_show:not(.t-feed__post-popup):not(.t945__popup)'); if (popupAll.length == 1) { if (typeof t_triggerEvent === 'function') t_triggerEvent(document.body, 'popupHidden'); document.body.classList.remove('t-body_popupshowed') } else {
      var newPopup = []; for (var i = 0; i < popupAll.length; i++) { if (popupAll[i].getAttribute('data-tooltip-hook') === popupTooltipHook) { popupAll[i].classList.remove('t-popup_show'); newPopup.push(popupAll[i]) } }
      if (newPopup.length === popupAll.length) { if (typeof t_triggerEvent === 'function') t_triggerEvent(document.body, 'popupHidden'); document.body.classList.remove('t-body_popupshowed') }
  }
  if (typeof t_triggerEvent === 'function') t_triggerEvent(document.body, 'popupHidden'); popup.classList.remove('t-popup_show'); document.body.classList.remove('t702__body_popupshowed'); if (/iPhone|iPad|iPod/i.test(navigator.userAgent) && !window.MSStream && window.isiOSVersion && window.isiOSVersion[0] === 11) { t702_unlockScroll() }
  t_onFuncLoad('t_popup__addFocusOnTriggerButton', function () { t_popup__addFocusOnTriggerButton() }); setTimeout(function () { var popupHide = document.querySelectorAll('.t-popup:not(.t-popup_show)'); for (var i = 0; i < popupHide.length; i++) { popupHide[i].style.display = 'none' } }, 300); t702__triggerEvent(popup, 'tildamodal:close' + popupTooltipHook)
}
function t702_sendPopupEventToStatistics(popupName) {
  var virtPage = '/tilda/popup/'; var virtTitle = 'Popup: '; if (popupName.substring(0, 7) == '#popup:') { popupName = popupName.substring(7) }
  virtPage += popupName; virtTitle += popupName; if (window.Tilda && typeof Tilda.sendEventToStatistics == 'function') { Tilda.sendEventToStatistics(virtPage, virtTitle, '', 0) } else {
      if (ga) { if (window.mainTracker != 'tilda') { ga('send', { hitType: 'pageview', page: virtPage, title: virtTitle }) } }
      if (window.mainMetrika && window[window.mainMetrika]) { window[window.mainMetrika].hit(virtPage, { title: virtTitle, referer: window.location.href }) }
  }
}
function t702_onSuccess(form) { t_onFuncLoad('t_forms__onSuccess', function () { t_forms__onSuccess(form) }) }
function t702__lazyLoad() { if (window.lazy === 'y' || document.getElementById('allrecords').getAttribute('data-tilda-lazy') === 'yes') { t_onFuncLoad('t_lazyload_update', function () { t_lazyload_update() }) } }
function t702__triggerEvent(el, eventName) {
  var event; if (typeof window.CustomEvent === 'function') { event = new CustomEvent(eventName) } else if (document.createEvent) { event = document.createEvent('HTMLEvents'); event.initEvent(eventName, !0, !1) } else if (document.createEventObject) { event = document.createEventObject(); event.eventType = eventName }
  event.eventName = eventName; if (el.dispatchEvent) { el.dispatchEvent(event) } else if (el.fireEvent) { el.fireEvent('on' + event.eventType, event) } else if (el[eventName]) { el[eventName]() } else if (el['on' + eventName]) { el['on' + eventName]() }
}
